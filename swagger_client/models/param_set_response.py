# coding: utf-8

"""
    Processing Project

    This is the api for the processing project backend.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ParamSetResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'status': 'str',
        'name': 'str',
        'hx': 'float',
        'hy': 'float',
        'dz': 'float',
        'model_type': 'str',
        'peak_frequency': 'float',
        'simulation_time': 'float',
        'layers': 'list[Layer]',
        'density_layers': 'list[DensityLayer]'
    }

    attribute_map = {
        'id': '_id',
        'status': 'status',
        'name': 'name',
        'hx': 'hx',
        'hy': 'hy',
        'dz': 'dz',
        'model_type': 'modelType',
        'peak_frequency': 'peakFrequency',
        'simulation_time': 'simulationTime',
        'layers': 'layers',
        'density_layers': 'densityLayers'
    }

    def __init__(self, id=None, status=None, name=None, hx=None, hy=None, dz=None, model_type=None, peak_frequency=None, simulation_time=None, layers=None, density_layers=None):  # noqa: E501
        """ParamSetResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._status = None
        self._name = None
        self._hx = None
        self._hy = None
        self._dz = None
        self._model_type = None
        self._peak_frequency = None
        self._simulation_time = None
        self._layers = None
        self._density_layers = None
        self.discriminator = None
        self.id = id
        self.status = status
        if name is not None:
            self.name = name
        if hx is not None:
            self.hx = hx
        if hy is not None:
            self.hy = hy
        if dz is not None:
            self.dz = dz
        if model_type is not None:
            self.model_type = model_type
        if peak_frequency is not None:
            self.peak_frequency = peak_frequency
        if simulation_time is not None:
            self.simulation_time = simulation_time
        if layers is not None:
            self.layers = layers
        if density_layers is not None:
            self.density_layers = density_layers

    @property
    def id(self):
        """Gets the id of this ParamSetResponse.  # noqa: E501


        :return: The id of this ParamSetResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ParamSetResponse.


        :param id: The id of this ParamSetResponse.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def status(self):
        """Gets the status of this ParamSetResponse.  # noqa: E501


        :return: The status of this ParamSetResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ParamSetResponse.


        :param status: The status of this ParamSetResponse.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["UNSUBMITTED", "IN_PROGRESS", "COMPLETE"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def name(self):
        """Gets the name of this ParamSetResponse.  # noqa: E501


        :return: The name of this ParamSetResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ParamSetResponse.


        :param name: The name of this ParamSetResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def hx(self):
        """Gets the hx of this ParamSetResponse.  # noqa: E501


        :return: The hx of this ParamSetResponse.  # noqa: E501
        :rtype: float
        """
        return self._hx

    @hx.setter
    def hx(self, hx):
        """Sets the hx of this ParamSetResponse.


        :param hx: The hx of this ParamSetResponse.  # noqa: E501
        :type: float
        """

        self._hx = hx

    @property
    def hy(self):
        """Gets the hy of this ParamSetResponse.  # noqa: E501


        :return: The hy of this ParamSetResponse.  # noqa: E501
        :rtype: float
        """
        return self._hy

    @hy.setter
    def hy(self, hy):
        """Sets the hy of this ParamSetResponse.


        :param hy: The hy of this ParamSetResponse.  # noqa: E501
        :type: float
        """

        self._hy = hy

    @property
    def dz(self):
        """Gets the dz of this ParamSetResponse.  # noqa: E501


        :return: The dz of this ParamSetResponse.  # noqa: E501
        :rtype: float
        """
        return self._dz

    @dz.setter
    def dz(self, dz):
        """Sets the dz of this ParamSetResponse.


        :param dz: The dz of this ParamSetResponse.  # noqa: E501
        :type: float
        """

        self._dz = dz

    @property
    def model_type(self):
        """Gets the model_type of this ParamSetResponse.  # noqa: E501


        :return: The model_type of this ParamSetResponse.  # noqa: E501
        :rtype: str
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type):
        """Sets the model_type of this ParamSetResponse.


        :param model_type: The model_type of this ParamSetResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["Elastic", "Acoustic"]  # noqa: E501
        if model_type not in allowed_values:
            raise ValueError(
                "Invalid value for `model_type` ({0}), must be one of {1}"  # noqa: E501
                .format(model_type, allowed_values)
            )

        self._model_type = model_type

    @property
    def peak_frequency(self):
        """Gets the peak_frequency of this ParamSetResponse.  # noqa: E501


        :return: The peak_frequency of this ParamSetResponse.  # noqa: E501
        :rtype: float
        """
        return self._peak_frequency

    @peak_frequency.setter
    def peak_frequency(self, peak_frequency):
        """Sets the peak_frequency of this ParamSetResponse.


        :param peak_frequency: The peak_frequency of this ParamSetResponse.  # noqa: E501
        :type: float
        """

        self._peak_frequency = peak_frequency

    @property
    def simulation_time(self):
        """Gets the simulation_time of this ParamSetResponse.  # noqa: E501


        :return: The simulation_time of this ParamSetResponse.  # noqa: E501
        :rtype: float
        """
        return self._simulation_time

    @simulation_time.setter
    def simulation_time(self, simulation_time):
        """Sets the simulation_time of this ParamSetResponse.


        :param simulation_time: The simulation_time of this ParamSetResponse.  # noqa: E501
        :type: float
        """

        self._simulation_time = simulation_time

    @property
    def layers(self):
        """Gets the layers of this ParamSetResponse.  # noqa: E501


        :return: The layers of this ParamSetResponse.  # noqa: E501
        :rtype: list[Layer]
        """
        return self._layers

    @layers.setter
    def layers(self, layers):
        """Sets the layers of this ParamSetResponse.


        :param layers: The layers of this ParamSetResponse.  # noqa: E501
        :type: list[Layer]
        """

        self._layers = layers

    @property
    def density_layers(self):
        """Gets the density_layers of this ParamSetResponse.  # noqa: E501


        :return: The density_layers of this ParamSetResponse.  # noqa: E501
        :rtype: list[DensityLayer]
        """
        return self._density_layers

    @density_layers.setter
    def density_layers(self, density_layers):
        """Sets the density_layers of this ParamSetResponse.


        :param density_layers: The density_layers of this ParamSetResponse.  # noqa: E501
        :type: list[DensityLayer]
        """

        self._density_layers = density_layers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ParamSetResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ParamSetResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
